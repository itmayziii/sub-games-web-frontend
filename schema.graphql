directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

directive @constraint(
  """Strings"""
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  pattern: String
  format: String

  """Integers / Floats"""
  min: Int
  max: Int
  exclusiveMin: Int
  exclusiveMax: Int
  multipleOf: Int
) on INPUT_FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input ActiveSubGameSessionByUserIdInput {
  userId: ID!
}

type ActiveSubGameSessionByUserIdPayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession
}

input ActiveSubGameSessionByUsernameInput {
  """
  This "username" input is case sensitive and refers to a users Twitch
  "dipslay_name" not their "login" name.
  https://dev.twitch.tv/docs/api/reference#get-users
  """
  username: ID!
}

type ActiveSubGameSessionByUsernamePayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession
}

scalar first_Int_min_0

input JoinSubGameSessionQueueInput {
  userId: ID!
  subGameSessionId: ID!
}

type JoinSubGameSessionQueuePayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession!
}

scalar maxActivePlayers_Int_min_0_max_1000

scalar maxPlayCount_Int_min_0_max_1000

input MovePlayerQueueOrderInput {
  userId: ID!
  order: order_Int_NotNull_max_5000!
  subGameSessionId: ID!
}

type MovePlayerQueueOrderPayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession!
}

type Mutation {
  joinSubGameSessionQueue(input: JoinSubGameSessionQueueInput!): JoinSubGameSessionQueuePayload!
  refreshToken(input: RefreshTokenInput): RefreshTokenPayload!
  startSubGameSession(input: StartSubGameSessionInput!): StartSubGameSessionPayload!
  movePlayerQueueOrder(input: MovePlayerQueueOrderInput!): MovePlayerQueueOrderPayload!
}

interface Node {
  """
  https://relay.dev/docs/guides/graphql-server-specification/
  https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface
  """
  id: ID!
}

scalar order_Int_NotNull_max_5000

"""https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo"""
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

interface Payload {
  complexity: Int!
}

type Player implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

interface PlayerInterface {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

type Query {
  """https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface"""
  node(id: ID!): Node
  sessionsByUserId(input: SessionsByUserIdInput!): SessionsConnection!
  activeSubGameSessionByUsername(input: ActiveSubGameSessionByUsernameInput!): ActiveSubGameSessionByUsernamePayload!
  activeSubGameSessionByUserId(input: ActiveSubGameSessionByUserIdInput!): ActiveSubGameSessionByUserIdPayload!
  subGameSessionById(input: SubGameSessionByIdInput!): SubGameSessionByIdPayload!
}

type QueuedPlayer implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
  order: Int!
}

scalar refreshToken_String_maxLength_255

input RefreshTokenInput {
  refreshToken: refreshToken_String_maxLength_255
}

type RefreshTokenPayload implements Payload {
  complexity: Int!
  success: Boolean!
}

type Session implements Node {
  id: ID!

  """Last sub game session which may be be active or inactive."""
  subGameSession: SubGameSession

  """Currently active Twitch stream."""
  twitchSession: TwitchSession!
}

type SessionEdge {
  node: Session!

  """
  This cursor is not spec compliant - https://relay.dev/graphql/connections.htm#sec-Cursor. Instead this cursor will be
  the same for every edge and can be used to retrieve the next set of results. This difference from the spec is due to
  the limitations of the Twitch API.
  """
  cursor: String
}

"""https://relay.dev/graphql/connections.htm#sec-Arguments"""
input SessionsByUserIdInput {
  userId: ID!

  """
  https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
  """
  first: first_Int_min_0
  after: String
}

type SessionsConnection implements Payload {
  complexity: Int!
  edges: [SessionEdge!]!
  pageInfo: PageInfo!
}

input StartSubGameSessionInput {
  ownerId: ID!
  userMustVerifyEpic: Boolean
  maxPlayCount: maxPlayCount_Int_min_0_max_1000
  maxActivePlayers: maxActivePlayers_Int_min_0_max_1000
  isSubOnly: Boolean
}

type StartSubGameSessionPayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession!
}

type SubGameSession implements Node {
  id: ID!
  owner: User!
  isActive: Boolean!
  userMustVerifyEpic: Boolean!
  maxPlayCount: Int
  maxActivePlayers: Int!
  queuedPlayers: [QueuedPlayer!]!
  alreadyPlayedUsers: [Player!]!
  activePlayers: [Player!]!
  isSubOnly: Boolean!
}

input SubGameSessionByIdInput {
  id: ID!
}

type SubGameSessionByIdPayload implements Payload {
  complexity: Int!
  subGameSession: SubGameSession
}

type TwitchSession {
  user: User!
  gameName: String!
  viewerCount: Int!
  thumbnailURL: String!
}

type User implements UserInterface & Node {
  id: ID!
  username: String!
}

interface UserInterface {
  id: ID!
  username: String!
}

