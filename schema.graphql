"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input ActiveSubGameSessionByUserIdInput {
  id: ID!
}

type ActiveSubGameSessionByUserIdPayload {
  subGameSession: SubGameSession
}

input ActiveSubGameSessionByUsernameInput {
  """
  This "username" input is case sensitive and refers to a users Twitch
  "dipslay_name" not their "login" name.
  https://dev.twitch.tv/docs/api/reference#get-users
  """
  username: ID!
}

type ActiveSubGameSessionByUsernamePayload {
  subGameSession: SubGameSession
}

input JoinSubGameSessionQueueInput {
  userId: ID!
  sessionId: ID!
}

type JoinSubGameSessionQueuePayload {
  subGameSession: SubGameSession!
}

input MovePlayerQueueOrderInput {
  userId: ID!
  order: Int!
  sessionId: ID!
}

type MovePlayerQueueOrderPayload {
  subGameSession: SubGameSession!
}

type Mutation {
  joinSubGameSessionQueue(input: JoinSubGameSessionQueueInput!): JoinSubGameSessionQueuePayload!
  refreshToken(input: RefreshTokenInput): RefreshTokenPayload!
  startSubGameSession(input: StartSubGameSessionInput!): StartSubGameSessionPayload!
  movePlayerQueueOrder(input: MovePlayerQueueOrderInput!): MovePlayerQueueOrderPayload!
}

interface Node {
  """
  https://relay.dev/docs/guides/graphql-server-specification/
  https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface
  """
  id: ID!
}

"""https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo"""
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Player implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

interface PlayerInterface {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

type Query {
  """https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface"""
  node(id: ID!): Node
  sessionsByUserId(input: SessionsByUserIdInput!): SessionsConnection!
  activeSubGameSessionByUsername(input: ActiveSubGameSessionByUsernameInput!): ActiveSubGameSessionByUsernamePayload!
  activeSubGameSessionByUserId(input: ActiveSubGameSessionByUserIdInput!): ActiveSubGameSessionByUserIdPayload!
  subGameSessionById(input: SubGameSessionByIdInput!): SubGameSessionByIdPayload!
}

type QueuedPlayer implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
  order: Int!
}

input RefreshTokenInput {
  refreshToken: ID
}

type RefreshTokenPayload {
  success: Boolean!
}

type Session implements Node {
  id: ID!

  """Last sub game session which may be be active or inactive."""
  subGameSession: SubGameSession

  """Currently active Twitch stream."""
  twitchSession: TwitchSession!
}

type SessionEdge {
  node: Session!

  """
  This cursor is not spec compliant - https://relay.dev/graphql/connections.htm#sec-Cursor. Instead this cursor will be
  the same for every edge and can be used to retrieve the next set of results. This difference from the spec is due to
  the limitations of the Twitch API.
  """
  cursor: String
}

"""https://relay.dev/graphql/connections.htm#sec-Arguments"""
input SessionsByUserIdInput {
  id: ID!

  """
  https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
  """
  first: Int
  after: String
}

type SessionsConnection {
  edges: [SessionEdge!]!
  pageInfo: PageInfo!
}

input StartSubGameSessionInput {
  ownerId: ID!
  userMustVerifyEpic: Boolean
  maxPlayCount: Int
  maxActivePlayers: Int
  isSubOnly: Boolean
}

type StartSubGameSessionPayload {
  subGameSession: SubGameSession!
}

type SubGameSession implements Node {
  id: ID!
  owner: User!
  isActive: Boolean!
  userMustVerifyEpic: Boolean!
  maxPlayCount: Int
  maxActivePlayers: Int!
  queuedPlayers: [QueuedPlayer!]!
  alreadyPlayedUsers: [Player!]!
  activePlayers: [Player!]!
  isSubOnly: Boolean!
}

input SubGameSessionByIdInput {
  id: ID!
}

type SubGameSessionByIdPayload {
  subGameSession: SubGameSession
}

type TwitchSession {
  user: User!
  gameName: String!
  viewerCount: Int!
  thumbnailURL: String!
}

type User implements UserInterface & Node {
  id: ID!
  username: String!
}

interface UserInterface {
  id: ID!
  username: String!
}

