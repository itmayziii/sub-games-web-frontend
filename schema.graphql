"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input ActiveSubGameSessionByIdInput {
  id: ID!
}

type ActiveSubGameSessionByIdPayload {
  subGameSession: SubGameSession
}

input ActiveSubGameSessionByUsernameInput {
  """
  This "username" input is case sensitive and refers to a users Twitch
  "dipslay_name" not their "login" name.
  https://dev.twitch.tv/docs/api/reference#get-users
  """
  username: ID!
}

type ActiveSubGameSessionByUsernamePayload {
  subGameSession: SubGameSession
}

input JoinSubGameSessionQueueInput {
  userId: ID!
  sessionId: ID!
}

type JoinSubGameSessionQueuePayload {
  subGameSession: SubGameSession!
}

input MovePlayerQueueOrderInput {
  userId: ID!
  order: Int!
  sessionId: ID!
}

type MovePlayerQueueOrderPayload {
  subGameSession: SubGameSession!
}

type Mutation {
  joinSubGameSessionQueue(input: JoinSubGameSessionQueueInput!): JoinSubGameSessionQueuePayload!
  refreshToken(input: RefreshTokenInput): RefreshTokenPayload!
  startSubGameSession(input: StartSubGameSessionInput!): StartSubGameSessionPayload!
  movePlayerQueueOrder(input: MovePlayerQueueOrderInput!): MovePlayerQueueOrderPayload!
}

interface Node {
  """
  https://relay.dev/docs/guides/graphql-server-specification/
  https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface
  """
  id: ID!
}

type Player implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

interface PlayerInterface {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
}

type Query {
  """https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface"""
  node(id: ID!): Node
  activeSubGameSessionByUsername(input: ActiveSubGameSessionByUsernameInput!): ActiveSubGameSessionByUsernamePayload!
  activeSubGameSessionById(input: ActiveSubGameSessionByIdInput!): ActiveSubGameSessionByIdPayload!
  subGameSessionById(input: SubGameSessionByIdInput!): SubGameSessionByIdPayload!
}

type QueuedPlayer implements UserInterface & PlayerInterface & Node {
  id: ID!
  username: String!
  playCount: Int!
  allTimePlayCount: Int!
  order: Int!
}

input RefreshTokenInput {
  refreshToken: ID
}

type RefreshTokenPayload {
  success: Boolean!
}

input StartSubGameSessionInput {
  ownerId: ID!
  userMustVerifyEpic: Boolean
  maxPlayCount: Int
  maxActivePlayers: Int
  isSubOnly: Boolean
}

type StartSubGameSessionPayload {
  subGameSession: SubGameSession!
}

type SubGameSession implements Node {
  id: ID!
  owner: User!
  isActive: Boolean!
  userMustVerifyEpic: Boolean!
  maxPlayCount: Int
  maxActivePlayers: Int!
  queuedPlayers: [QueuedPlayer!]!
  alreadyPlayedUsers: [Player!]!
  activePlayers: [Player!]!
  isSubOnly: Boolean!
}

input SubGameSessionByIdInput {
  id: ID!
}

type SubGameSessionByIdPayload {
  subGameSession: SubGameSession
}

type User implements UserInterface & Node {
  id: ID!
  username: String!
}

interface UserInterface {
  id: ID!
  username: String!
}

